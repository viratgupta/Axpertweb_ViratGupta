package Axpert_Operations;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.Method;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Iterator;
import java.util.List;
import java.util.Properties;
import java.util.Set;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.Select;
import org.testng.ITestResult;
import org.testng.annotations.AfterClass;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;

import com.relevantcodes.extentreports.ExtentReports;
import com.relevantcodes.extentreports.ExtentTest;
import com.relevantcodes.extentreports.LogStatus;

import mx4j.util.Utils;

public class TestBase extends Utills {
	
	InputStream stream;
	
	static {
		Calendar calendar = Calendar.getInstance();
		SimpleDateFormat formater = new SimpleDateFormat("dd_MM_yyyy_hh_mm_ss");
		extent = new ExtentReports("D:\\ViratGupta\\Axpert 9_ViratGupta\\Reports format.html", false);
	}
	
	public static Properties Repository= new Properties();
	
	public void test() throws Exception
	{
		LoadRepository();
		selectBrowser(Repository.getProperty("browser"));
		driver.get(Repository.getProperty("url"));
		implicitWait(30);
	}
	
	public void LoadRepository() throws IOException
	{
		stream = new FileInputStream(new File(System.getProperty("user.dir")+"\\src\\Objects\\TestData.properties"));
		
		Repository.load(stream);
		
		stream = new FileInputStream(new File(System.getProperty("user.dir")+"\\src\\Objects\\login.properties"));
		
		Repository.load(stream);
		
		stream = new FileInputStream(new File(System.getProperty("user.dir")+"\\src\\Objects\\GenMap_NG2NG.properties"));
		
		Repository.load(stream);
		
		stream = new FileInputStream(new File(System.getProperty("user.dir")+"\\src\\Objects\\GenMap_NG2G.properties"));
		
		Repository.load(stream);
		
		stream = new FileInputStream(new File(System.getProperty("user.dir")+"\\src\\Objects\\GenMap_G2G.properties"));
		
		Repository.load(stream);
		
		stream = new FileInputStream(new File(System.getProperty("user.dir")+"\\src\\Objects\\GenMap_G2NG.properties"));
		
		Repository.load(stream);
		
		stream = new FileInputStream(new File(System.getProperty("user.dir")+"\\src\\Objects\\MDMap_NG2NG.properties"));
		
		Repository.load(stream);
		
		stream = new FileInputStream(new File(System.getProperty("user.dir")+"\\src\\Objects\\MDMap_G2G.properties"));
		
		Repository.load(stream);
		
		stream = new FileInputStream(new File(System.getProperty("user.dir")+"\\src\\Objects\\AxpertFunctions.properties"));
		
		Repository.load(stream);
		
		stream = new FileInputStream(new File(System.getProperty("user.dir")+"\\src\\Objects\\Grid.properties"));
		
		Repository.load(stream);
		
		stream = new FileInputStream(new File(System.getProperty("user.dir")+"\\src\\Objects\\ExpressionDependencies.properties"));
		
		Repository.load(stream);
		
		stream = new FileInputStream(new File(System.getProperty("user.dir")+"\\src\\Objects\\DynamicDecimal.properties"));
		
		Repository.load(stream);
		
		stream = new FileInputStream(new File(System.getProperty("user.dir")+"\\src\\Objects\\NonGridImages.properties"));
		
		Repository.load(stream);
		
		stream = new FileInputStream(new File(System.getProperty("user.dir")+"\\src\\Objects\\Grid_Images.properties"));
		
		Repository.load(stream);
	}
		
		public static WebElement getLocator(String locator) throws Exception {
	        String[] split = locator.split(":");
			String locatorType = split[0];
			String locatorValue = split[1];

			if (locatorType.toLowerCase().equals("id"))
				return driver.findElement(By.id(locatorValue));
			
			else if (locatorType.toLowerCase().equals("name"))
				return driver.findElement(By.name(locatorValue));
			
			else if ((locatorType.toLowerCase().equals("classname"))
					|| (locatorType.toLowerCase().equals("class")))
				return driver.findElement(By.className(locatorValue));
			
			else if ((locatorType.toLowerCase().equals("tagname"))
					|| (locatorType.toLowerCase().equals("tag")))
				return driver.findElement(By.className(locatorValue));
			
			else if ((locatorType.toLowerCase().equals("linktext"))
					|| (locatorType.toLowerCase().equals("link")))
				return driver.findElement(By.linkText(locatorValue));
			
			else if (locatorType.toLowerCase().equals("partiallinktext"))
				return driver.findElement(By.partialLinkText(locatorValue));
			
			else if ((locatorType.toLowerCase().equals("cssselector"))
					|| (locatorType.toLowerCase().equals("css")))
				return driver.findElement(By.cssSelector(locatorValue));
			
			else if (locatorType.toLowerCase().equals("xpath"))
				return driver.findElement(By.xpath(locatorValue));
			
			else
				throw new Exception("Unknown locator type '" + locatorType + "'");
		}
		
		public static List<WebElement> getLocators(String locator) throws Exception {
	        String[] split = locator.split(":");
			String locatorType = split[0];
			String locatorValue = split[1];

			if (locatorType.toLowerCase().equals("id"))
				return driver.findElements(By.id(locatorValue));
			
			else if (locatorType.toLowerCase().equals("name"))
				return driver.findElements(By.name(locatorValue));
			
			else if ((locatorType.toLowerCase().equals("classname"))
					|| (locatorType.toLowerCase().equals("class")))
				return driver.findElements(By.className(locatorValue));
			
			else if ((locatorType.toLowerCase().equals("tagname"))
					|| (locatorType.toLowerCase().equals("tag")))
				return driver.findElements(By.className(locatorValue));
			
			else if ((locatorType.toLowerCase().equals("linktext"))
					|| (locatorType.toLowerCase().equals("link")))
				return driver.findElements(By.linkText(locatorValue));
			
			else if (locatorType.toLowerCase().equals("partiallinktext"))
				return driver.findElements(By.partialLinkText(locatorValue));
			
			else if ((locatorType.toLowerCase().equals("cssselector"))
					|| (locatorType.toLowerCase().equals("css")))
				return driver.findElements(By.cssSelector(locatorValue));
			
			else if (locatorType.toLowerCase().equals("xpath"))
				return driver.findElements(By.xpath(locatorValue));
			else
				throw new Exception("Unknown locator type '" + locatorType + "'");
		}
		
		public WebElement getWebElement(String locator) throws Exception{
			return getLocator(Repository.getProperty(locator));
		}
		
		public List<WebElement> getWebElements(String locator) throws Exception{
			return getLocators(Repository.getProperty(locator));
		}
		
		public void closeBrowser(){
			driver.quit();
		}
		
		
	
}
