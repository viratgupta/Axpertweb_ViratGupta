package Axpert_Operations;

import java.io.File;
import java.io.IOException;
import java.lang.reflect.Method;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Iterator;
import java.util.concurrent.TimeUnit;
import java.util.Set;

import org.apache.bcel.Repository;
import org.apache.commons.io.FileUtils;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;
import org.testng.ITestResult;
import org.testng.Reporter;
import org.testng.annotations.AfterClass;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;

import com.relevantcodes.extentreports.ExtentReports;
import com.relevantcodes.extentreports.ExtentTest;
import com.relevantcodes.extentreports.LogStatus;

public class Utills {
	
	public static WebDriver driver;
	public static ExtentReports extent;
	public  ExtentTest test;
	public ITestResult result;
	
	static {
		Calendar calendar = Calendar.getInstance();
		SimpleDateFormat formater = new SimpleDateFormat("dd_MM_yyyy_hh_mm_ss");
		extent = new ExtentReports(System.getProperty("user.dir")+"/src/Reports/ExtentReport "+formater.format(calendar.getTime()) +".html", true);
	}
	
	public static WebDriver selectBrowser(String browser){
		if (browser.equals("firefox") || browser.equals("FIREFOX")) {
			driver = new FirefoxDriver();
			driver.manage().window().maximize();
			return driver;
		} 
		else if (browser.equals("chrome") || browser.equals("CHROME")) {
			System.out.println("chrome browser");
			String ChromePath= "D:\\ViratGupta\\Axpert 9_ViratGupta\\Axpert_Framework\\Axpert_Framework\\src\\BrowserDrivers\\chromedriver.exe";
			System.setProperty("webdriver.chrome.driver",ChromePath);
			driver = new ChromeDriver();
			driver.manage().window().maximize();
			return driver;
		} 
		else if (browser.equals("ie") || browser.equals("IE")) {
			driver = new InternetExplorerDriver();
			driver.manage().window().maximize();
			return driver;
		}
		return null;
	}
	
	public void selectDropDownValue(WebElement element, String dropDownValue){
		Select select = new Select(element);
		Reporter.log("selecting "+dropDownValue+" value from dropdown");
		select.selectByVisibleText(dropDownValue);
	}
	
	public void selectDropDownValueUsingIndex(WebElement element1, int index){
		Select select1 = new Select(element1);
		Reporter.log("selecting "+index+" value from dropdown");
		select1.selectByIndex(index);
	}
	
	public void SidebarMenu(WebElement Fst_element, WebElement child_element) throws Exception
	{
		implicitWait(15);
		Actions action = new Actions(driver);
		action.moveToElement(Fst_element).moveToElement(child_element).click().perform();
		}
	
	public void SwitchFrame(WebElement frameName) throws InterruptedException
	{
		
		driver.switchTo().frame(frameName);
		Thread.sleep(2000);
	}
	
	public void implicitWait(int timeInsec){
		//Reporter.log("waiting for page to load...");
		try{
		driver.manage().timeouts().implicitlyWait(timeInsec, TimeUnit.SECONDS);
		//Reporter.log("Page is loaded");
		}
		catch(Throwable error){
			Reporter.log("Timeout for Page Load Request to complete after "+ timeInsec + " seconds");
			Assert.assertTrue(true, "Timeout for page load request after "+timeInsec+" second");
		}
	}
	
	public void driverwait(int timeToWaitInSec) throws InterruptedException{
	//	Reporter.log("waiting for "+timeToWaitInSec+" seconds...");
		Thread.sleep(timeToWaitInSec*1000);
	}
	
	public static void expliciteWait(WebElement element, int timeToWaitInSec) {
		WebDriverWait wait = new WebDriverWait(driver, timeToWaitInSec);
		wait.until(ExpectedConditions.visibilityOf(element));
	}
	
	public void WaitForAlertBox()
	{
		WebDriverWait wait = new WebDriverWait(driver, 15, 100);
		wait.until(ExpectedConditions.alertIsPresent());
		
	}
	
	 public void scrollUp() throws InterruptedException {
		driverwait(3); 
		
		((JavascriptExecutor)

		driver).executeScript("window.scrollTo(document.body.scrollHeight,0)");
	      
	    }
	 
		public void ChildWindowHandle()
		 {
			for (String winHandle : driver.getWindowHandles())
			{
			    driver.switchTo().window(winHandle); 
			}
		 }
		
		/*public String getScreenShot(String imageName) throws IOException{
			
			if(imageName.equals("")){
				imageName = "blank";
			}
			File image = ((TakesScreenshot)driver).getScreenshotAs(OutputType.FILE);
			String imagelocation = System.getProperty("user.dir")+"src/Reports/ScreenShots/";
			Calendar calendar = Calendar.getInstance();
			SimpleDateFormat formater = new SimpleDateFormat("dd_MM_yyyy_hh_mm_ss");
			String actualImageName = imagelocation+imageName+"_"+formater.format(calendar.getTime())+".png";
			File destFile = new File(actualImageName);
			FileUtils.copyFile(image, destFile);
			return actualImageName;
		}*/
		
		public void getresult(ITestResult result) throws IOException {
			if (result.getStatus() == ITestResult.SUCCESS) {
				test.log(LogStatus.PASS, result.getName()+ "test is pass");
			} else if (result.getStatus() == ITestResult.SKIP) {
				test.log(LogStatus.SKIP, result.getName() + " test is skipped and skip reason is:-" + result.getThrowable());
			} else if (result.getStatus() == ITestResult.FAILURE) {
				test.log(LogStatus.FAIL, result.getName() + " test is failed" + result.getThrowable());
				/*String screen = getScreenShot("virat");
				test.log(LogStatus.FAIL, test.addScreenCapture(screen));*/
			} else if (result.getStatus() == ITestResult.STARTED) {
				test.log(LogStatus.INFO, result.getName() + " test is started");
			}
		}

		@AfterMethod()
		public void afterMethod(ITestResult result) throws IOException {
			getresult(result);
		}

		@BeforeMethod()
		public void beforeMethod(Method result) {
			
			System.out.println("ER");
			test = extent.startTest(result.getName());
			test.log(LogStatus.INFO, result.getName() + " test Started");
		}
		
		@AfterClass(alwaysRun = true)
		public void endTest() {
			//driver.quit();
			extent.endTest(test);
			extent.flush();
		}

	
	 
	}


